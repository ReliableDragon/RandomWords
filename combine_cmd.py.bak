from file_manager import FileManager
from file_command import FileCommand
from arg import Arg

class Combine(FileCommand):

  @staticmethod
  def cmd_name():
    return 'combine'

  @staticmethod
  def cmd_args():
    return [Arg(str), Arg(str), Arg(str, optional=True)]

  def overview(self):
    return 'combine [c] in(/out){alias, filename*} in{alias, filename} out{alias}'

  def matches(self, line):
    regex = r'(combine|c) [\w_.\/]+ [\w_.\/]+( [\w_.\/]+)?'
    return self.check_match(regex, line)

  def parse_args(self, line):
    return line.strip().split(' ')[1:]

  def execute(self, args_, context):
    out_ctx = {}
    n1 = args_[0]
    n2 = args_[1]
    n3 = None
    if len(args_) == 3:
      n3 = args_[2]

    w1 = None
    if n3 == None:
      assert n1 in context, f'Got name {n1} as first argument to two-parameter version of combine, but context only contained {context}'
    if n1 in context:
      w1 = context[n1]
    else:
      n1 = self.fm.get_rooted(n1)
      w1 = self.fm.get_words(n1)

    w2 = None
    if n2 in context:
      w2 = context[n2]
    else:
      n2 = self.fm.get_rooted(n2)
      w2 = self.fm.get_words(n2)

    words = list(set(w1) | set(w2))
    if n3 != None:
      out_ctx[n3] = words
    else:
      out_ctx[n1] = words
    return out_ctx

